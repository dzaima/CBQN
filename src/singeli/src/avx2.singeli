# super questionable pack - assumes high halves are zero
def packQQ{a:T,b:T==[4]i64} = vec_shuffle{[4]i32, a, 0,2,1,1} | vec_shuffle{[4]i32, b, 1,1,0,2}
def packQQ{{a, b}} = packQQ{a, b}

# structural operations
def sel{L, x:T, i:I if w256{T} and lvec{L,8,32} and w256{I,32}} = vec_shuffle{L, x, i}
def sel{L, x:T, i:I if w256{T} and lvec{L,16,8} and w256{I, 8}} = vec_shuffle{L, x, i}

# masked store; F variants may not be a single instruction
def store_masked_top{p:*E, m:M=[k]_, v:V=[k]E if w256{V, 32} and w256i{M}} = emit{void, '_mm256_maskstore_epi32', *i32~~p, m, [8]i32~~v}
def store_masked_top{p:*E, m:M=[k]_, v:V=[k]E if w256{V, 64} and w256i{M}} = emit{void, '_mm256_maskstore_pd',    *f64~~p, m, [4]f64~~v}
def store_masked_hom{p:*E, m:M=[k]_, v:V=[k]E if w256{V    } and w256i{M}} = store_masked_top{p,m,v}

def store_blended_top{p:*E, m:M=[k]_, v:V=[k]E if w256i{M} and width{E}>=32} = store_masked_top{p,m,v}
def store_blended_hom{p:*E, m:M=[k]_, v:V=[k]E if w256i{M} and width{E}>=32} = store_masked_top{p,m,v}
def store_blended_hom{p:*E, m:M=[k]_, v:V=[k]E if w256i{M} and width{E}<=16 and w256{V,elwidth{M}}} = store{p, blend_hom{load{V, p}, v, m}}

# mask stuff
def top_to_int{x:T if w256{T, 8}} = emit{u32, '_mm256_movemask_epi8', x}
def top_to_int{x:T if w256{T, 16}} = {
  msk:u32 = top_to_int{emit{[32]u8, '_mm256_packs_epi16', x, [16]u16**0}}
  (msk&255) | (msk>>8)
}

def any_hom{x:T if w256i{T}} = ~emit{u1, '_mm256_testz_si256', v2i{x}, v2i{x}}
def all_hom{x:T if w256i{T}} = hom_to_int{[32]u8 ~~ x} == 0xffff_ffff
def any_top{x:T      if w256i{T}} = top_to_int{x} != 0
def all_top{x:T=[k]_ if w256i{T}} = top_to_int{x} == (1<<k)-1
def hom_to_int{a:T, b:T if w256i{T,16}} = hom_to_int{vec_shuffle{[4]u64, packs128{ty_s{a},ty_s{b}}, 0,2,1,3}}

def any_top{x:T if w256i{T,32}} = ~emit{u1, '_mm256_testz_ps', v2f{x}, v2f{x}}
def any_top{x:T if w256i{T,64}} = ~emit{u1, '_mm256_testz_pd', v2d{x}, v2d{x}}
def any_hom{x:T if w256i{T} and elwidth{T}>=32} = any_top{x}

def any_top{x:T if w256i{T,16}} = any_hom{[16]i16~~x  <  [16]i16**0}
def all_top{x:T if w256i{T,16}} = all_hom{[16]i16~~x  <  [16]i16**0}


# conversion
def narrow{T, x:X if w256i{X,32} and width{T}==8} = {
  a:= packs128{x, x}
  b:= packs128{a, a}
  re_el{T, sel{[8]u32, b, make{[8]i32, 0,4,0,4,0,4,0,4}}}
}
def narrow{T, x:X if w256i{X,32} and width{T}==16} = re_el{T, vec_shuffle{[4]u64, packs128{x, x}, 0,2,1,3}}
def narrow{T, x:X if w256i{X,16} and width{T}== 8} = re_el{T, vec_shuffle{[4]u64, packs128{x, x}, 0,2,1,3}}

def narrow{T, x:X if w256f{X,64} and T<i32} = narrow{T, narrow{i32, x}}
def narrow{T, x:X if w256f{X,64} and T==i32} = emit{[4]i32, '_mm256_cvtpd_epi32', x}

def narrow{T, x:X if w256u{X,64} and T==u32} = re_el{T, sel{[8]i32, x, make{[8]i32, 2*iota{8}}}}
def narrow{T, x:X if w256u{X,64} and T==u16} = re_el{T, sel{[16]i8, narrow{u32,x}, make{[32]i8, (iota{32}>>1<<2) | (iota{32}&1)}}}
def narrow{T, x:X if w256u{X,64} and T== u8} = re_el{T, sel{[16]i8, narrow{u32,x}, make{[32]i8, 4*iota{32}}}}


def cvt2{(i32), x:X==[4]f64} = emit{[4]i32, '_mm256_cvtpd_epi32', x}
def cvt2{(f64), x:X==[4]i32} = emit{[4]f64, '_mm256_cvtepi32_pd', x}


def unzip128{a:[k]E, b:[k]E, 0 if hasarch{'X86_64'} and isunsigned{E}} = {
  def ED = w_d{E}
  def c = make{[k]E, maxvalue{E} * (1-(1 & range{k}))}
  packs128{re_el{ED,a&c}, re_el{ED,b&c}}
}
def unzip128{a:[k]E, b:[k]E, 1 if hasarch{'X86_64'} and isunsigned{E}} = {
  def ED = w_d{E}
  def ew = width{E}
  packs128{re_el{ED,a} >> ew, re_el{ED,b} >> ew}
}
def unzip128{a:T, b:T==[8](u32), k} = shuf_ind{a, b, tup{0,2,8,10, 4,6,12,14}+k}
def unzip128{a:T, b:T==[4](u64), k} = shuf_ind{a, b, tup{0,4,2,6}+k}

def unzip{a:T, b:T, k if w128u{T} and hasarch{'SSE2'}} = unzip128{a, b, k}
def unzip{a:T, b:T, k if w256u{T} and hasarch{'AVX2'}} = vec_shuffle{[4]u64, unzip128{a, b, k}, 0,2,1,3}

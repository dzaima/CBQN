# Used by scan.singeli and bins.singeli

def has_sel8 = hasarch{'SSSE3'} or hasarch{'AARCH64'}
def sel8{v:V, t} = sel{[16]u8, v, make{re_el{i8,V}, t}}
def sel8{v:V, t if w256{V} and ktup{t} and length{t}==16} = sel8{v, merge{t,t}}

local def rev{t} = { def l=length{t}; def j=l-1; select{j-t, j-range{l}} }
local def rev{up,t} = if (up) t else rev{t}
def sel8{v, t, up} = sel8{v, rev{up,t}}

def zip{up, x if knum{up}} = zip{x, x, up}

# Fill last 4 bytes with last element, in each lane
def spread{a:[_]T, ...up} = {
  def w = width{T}
  def b = w/8
  if (w<=16) sel8{a,merge{iota{12},(16-b)+iota{4}%b}, ...up} else a
}

# Set all elements with the last element of the input
def broadcast_last{n:VT, up if has_simd and w128{VT}} = {
  def l{v, w} = l{zip{up,v}, 2*w}
  def l{v, w if has_sel8} = sel8{v, up*(16-w/8)+iota{16}%(w/8)}
  def l{v, w==32} = shuf{[4]i32, v, 4**(up*3)}
  def l{v, w==64} = shuf{[2]i64, v, 2** up   }
  l{n, elwidth{VT}}
}
def broadcast_last{n:VT, up if hasarch{'AVX2'} and w256{VT}} = {
  if (elwidth{VT}<=32) sel{[8]i32, spread{n,up}, [8]i32**(up*7)}
  else shuf{[4]u64, n, 4**(up*3)}
}
def broadcast_last{n:[k]_, up if hasarch{'AARCH64'}} = broadcast_sel{n, if (up) k-1 else 0}
def broadcast_last{n:VT} = broadcast_last{n, 1}

# Make prefix scan from op and shifter by applying the operation
# at increasing power-of-two shifts
def prefix_byshift{op, sh} = {
  def pre{v:V, k} = if (k < width{V}) pre{op{v, sh{v,k}}, 2*k} else v
  {v:T} => pre{v, if (isvec{T}) elwidth{T} else 1}
}

def get_id{op,T} = (match (op) { {(__min)}=>maxvalue; {(__max)}=>minvalue }){T}

def make_scan_idem{T, op, up} = {
  # Within each lane, scan using shifts by powers of 2. First k elements
  # when shifting by k don't need to change, so leave them alone.
  def shift{k,l} = rev{up, merge{iota{k},iota{l-k}}}
  def shb{v:V, k} = {
    def w=width{T}; def c = k/w
    def merger{a,b} = if (up) merge{a,b} else merge{b,a}
    def id = make{V, merger{c**get_id{op,T}, (width{V}/w-c)**0}}
    (if (up) vec_shift_right_128 else vec_shift_left_128){v, c} | id
  }
  def shb{v, k if has_sel8} = sel8{v, shift{k/8,16}}
  def shb{v, k if k>=32} = shuf{[4]u32, v, shift{k/32,4}}
  def shb{v, k if k==128 and hasarch{'AVX2'}} = {
    # After lanewise scan, broadcast end of lane 0 to entire lane 1
    shuf{[8]i32, spread{v,up}, rev{up,3*(3<iota{8})}}
  }
  prefix_byshift{op, shb}
}
def make_scan_idem{(f64), op, up} = {
  def sc{a:[2]T} = op{a, zip{~up,a}}
  def sc{a:T if hasarch{'AVX2'} and w256{T}} = {
    def sh{s, a} = op{a, shuf{[4]u64, a, rev{up,s}}}
    sh{tup{0,1,1,1},sh{tup{0,0,2,2},a}}
  }
  sc
}
def make_scan_idem{T, op} = make_scan_idem{T, op, 1}

def scan_assoc_id0{op} = {
  def shl0{v:[_]T, k} = vec_shift_right_128{v, k/width{T}} # Lanewise
  def shl0{v:V=[_]T, k==128 if hasarch{'AVX2'}} = {
    # Broadcast end of lane 0 to entire lane 1
    if (width{T} < 64) {
      l:= V~~make{[8]i32,0,0,0,-1,0,0,0,0} & spread{v}
      sel{[8]i32, l, make{[8]i32, 3*(3<iota{8})}}
    } else {
      sel{[4]i64, v & V~~make{[4]i64,0,-1,0,0}, 1<iota{4}}
    }
  }
  prefix_byshift{op, shl0}
}

local {
  def has512 = x86_has512
  def has512e = x86_has512e
  def intrin = x86_intrin
  def intrin_t = x86_intrin_t
  def intrin_i = x86_intrin_i
  def mt{k} = merge{'mask', fmtnat{__max{k,8}}}
  def mr{s} = merge{s, '_mask'}
}

def store_masked_hom{p:*E, m:[l](u1), v:V=[l]E if has512e{V}} = {
  emit{void, intrin_i{V, 'mask_storeu'}, p, m, v}
}

local def maskop{M=[k](u1), op, ...args} = emit{M, merge{'_k',op,'_',mt{k}}, ...args}
def  __and{a:M=[k](u1), b:M} = maskop{M, 'and', a, b}
def andnot{a:M=[k](u1), b:M} = maskop{M, 'andn', b, a}
def   __or{a:M=[k](u1), b:M} = maskop{M, 'or', a, b}
def  __xor{a:M=[k](u1), b:M} = maskop{M, 'xor', a, b}
def   __ne{a:M=[k](u1), b:M} = maskop{M, 'xor', a, b}
def   __eq{a:M=[k](u1), b:M} = maskop{M, 'xnor', a, b}
def  __not{a:M=[k](u1)} = maskop{M, 'not', a}
def vec_shift_left {a:M=[k](u1), am if int_idx{am, k}} = maskop{M, 'shiftri', a, am}
def vec_shift_right{a:M=[k](u1), am if int_idx{am, k}} = maskop{M, 'shiftli', a, am}



# mask conversions
def hom_to_int{x:[k](u1)} = emit{ty_u{__max{k,8}}, merge{'_cvt',mt{k},'_u',fmtnat{__max{k,32}}}, x}
def int_to_mask{[k](u1), x:T if isunsigned{T} and width{T}>=k} = emit{[k]u1, merge{'_cvtu',fmtnat{__max{k,32}},'_',mt{k}}, x}

def reinterpret{T, a:M=[l](u1) if isint{T} and l==width{T}} = T~~hom_to_int{a}
def reinterpret{M=[l](u1), a:T if isint{T} and l==width{T}} = int_to_mask{M, a}

def top_to_mask{x:V=[k]E if E!=u1 and veci{V}} = emit{[k]u1, mr{intrin{V,'mov',x86_scali{E}}}, x}
def top_to_int{x:V=[_]_ if w512i{V}} = hom_to_int{top_to_mask{x}}
def hom_to_int{x:V=[_]_ if w512i{V}} = top_to_int{x}

def mask_to_hom{V=[l]_, x:[l](u1)} = emit{V, intrin_i{V,'movm'}, x}

def sel{(ty_u{V}), x:V=[_]E, i:I==(ty_u{V}) if (if (width{E}>8) has512e{V} else has512{V, 'VBMI'})} = emit{V, intrin_i{V, 'permutexvar'}, i, x}

def multishift{a:[k](u64), i:V=[(k*8)](u8) if has512{V, 'VBMI'}} = emit{V, intrin_i{V, 'multishift_epi64'}, i, a}

def narrow{DE, x:[k]SE if isint{DE} and quality{DE}==quality{SE} and x86_has512e{[k]SE}} = {
  emit{x86_vec_low{k,DE}, intrin{[k]SE, 'cvtepi', fmtwidth{SE}, '_epi', fmtwidth{DE}}, x}
}

local def a5cmp{a:V=[k]E, b:[k]E, int, flt if isfloat{E}} = emit{[k]u1, mr{intrin_t{V, 'cmp'}}, a, b, flt}
local def a5cmp{a:V=[k]E, b:[k]E, int, flt if   isint{E}} = emit{[k]u1, mr{intrin_t{V, 'cmp',int}}, a, b}
def eq_mask{a:V, b:V if has512e{V}} = a5cmp{a, b, 'eq',  0}
def ne_mask{a:V, b:V if has512e{V}} = a5cmp{a, b, 'neq', 4}
def gt_mask{a:V, b:V if has512e{V}} = a5cmp{a, b, 'gt',  30}
def ge_mask{a:V, b:V if has512e{V}} = a5cmp{a, b, 'ge',  29}
def lt_mask{a:V, b:V if has512e{V}} = a5cmp{a, b, 'lt',  17}
def le_mask{a:V, b:V if has512e{V}} = a5cmp{a, b, 'le',  18}

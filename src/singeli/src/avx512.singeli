local {
  def suf{T} = {
    if (isfloat{T}) (if (width{T}==32) 'ps' else 'pd')
    else merge{'epi', fmtnat{width{T}}}
  }
  def suf{[_]T} = suf{T}
  def pref{w} = merge{'_mm', if (w==128) '' else fmtnat{w}, '_'}
  def pref{V=[_]_} = pref{width{V}}
  
  def has512{V=[_]E} = if (width{V}==512) hasarch{'AVX512F'} else hasarch{'AVX512VL'}
  def has512{V, post} = has512{V} and hasarch{merge{'AVX512', post}}
  
  def has512e{V=[_]E if width{E}>=32} = has512{V}
  def has512e{V=[_]E if width{E}<=16} = has512{V, 'BW'}
  def has512e{V=[_]E, post} = has512e{V} and has512{V, post}
}

local def re_mask{[l]_, sub} = {
  def w = max{32,l}
  sub{fmtnat{l}, fmtnat{w}, ty_u{w}}
}
def reinterpret{M=[l==width{T}](u1), a:T} = {
  re_mask{M, {l,w,W} => emit{M, merge{'_cvtu',w,'_mask',l}, promote{W, a}}}
}
def reinterpret{T, a:M=[l==width{T}](u1)} = {
  re_mask{M, {l,w,W} => cast_i{T, emit{W, merge{'_cvtmask',l,'_u',w}, a}}}
}

def store_masked_hom{p:*E, m:[l](u1), v:V=[l]E if has512e{V}} = {
  emit{void, merge{pref{V}, 'mask_storeu_', suf{V}}, p, m, v}
}

def top_to_mask{x:V=[k]_} = emit{[k]u1, merge{pref{V},'mov',suf{V},'_mask'}, x}
def top_to_int{x:V=[k]_ if 512==width{V}} = ty_u{k}~~top_to_mask{x}
def hom_to_int{x:V=[_]_ if 512==width{V}} = top_to_int{x}

def mask_to_hom{V=[l]_, x:[l](u1)} = emit{V, merge{pref{V},'movm_',suf{V}}, x}

def sel{(ty_u{V}), x:V=[_]E, i:I==(ty_u{V}) if (if (width{E}>8) has512e{V} else has512{V, 'VBMI'})} = emit{V, merge{pref{V}, 'permutexvar_', suf{V}}, i, x}

def multishift{a:[k](u64), i:V=[(k*8)](u8) if has512{V, 'VBMI'}} = emit{V, merge{pref{V}, 'multishift_epi64_epi8'}, i, a}

local {
  def suf{T} = {
    if (isfloat{T}) (if (width{T}==32) 'ps' else 'pd')
    else merge{'epi', fmtnat{width{T}}}
  }
  def suf{[_]T} = suf{T}
  def pref{w} = merge{'_mm', if (w==128) '' else fmtnat{w}, '_'}
  def pref{V=[_]_} = pref{width{V}}
  def has512 = x86_has512
  def has512e = x86_has512e
  def intrin = x86_intrin
  def intrin_t = x86_intrin_t
  def mr{s} = merge{s, '_mask'}
}

local def re_mask{[l]_, sub} = {
  def w = __max{32,l}
  sub{fmtnat{l}, fmtnat{w}, ty_u{w}}
}
def reinterpret{M=[l==width{T}](u1), a:T} = {
  re_mask{M, {l,w,W} => emit{M, merge{'_cvtu',w,'_mask',l}, promote{W, a}}}
}
def reinterpret{T, a:M=[l==width{T}](u1)} = {
  re_mask{M, {l,w,W} => cast_i{T, emit{W, merge{'_cvtmask',l,'_u',w}, a}}}
}

def store_masked_hom{p:*E, m:[l](u1), v:V=[l]E if has512e{V}} = {
  emit{void, merge{pref{V}, 'mask_storeu_', suf{V}}, p, m, v}
}

def top_to_mask{x:V=[k]_} = emit{[k]u1, merge{pref{V},'mov',suf{V},'_mask'}, x}
def top_to_int{x:V=[k]_ if 512==width{V}} = ty_u{k}~~top_to_mask{x}
def hom_to_int{x:V=[_]_ if 512==width{V}} = top_to_int{x}

def mask_to_hom{V=[l]_, x:[l](u1)} = emit{V, merge{pref{V},'movm_',suf{V}}, x}

def sel{(ty_u{V}), x:V=[_]E, i:I==(ty_u{V}) if (if (width{E}>8) has512e{V} else has512{V, 'VBMI'})} = emit{V, merge{pref{V}, 'permutexvar_', suf{V}}, i, x}

def multishift{a:[k](u64), i:V=[(k*8)](u8) if has512{V, 'VBMI'}} = emit{V, merge{pref{V}, 'multishift_epi64_epi8'}, i, a}

def narrow{DE, x:[k]SE if isint{DE} and quality{DE}==quality{SE} and x86_has512e{[k]SE}} = {
  emit{x86_vec_low{k,DE}, intrin{[k]SE, 'cvtepi', fmtwidth{SE}, '_epi', fmtwidth{DE}}, x}
}

local def a5cmp{a:V=[k]E, b:[k]E, int, flt if isfloat{E}} = emit{[k]u1, mr{intrin_t{V, 'cmp'}}, a, b, flt}
local def a5cmp{a:V=[k]E, b:[k]E, int, flt if   isint{E}} = emit{[k]u1, mr{intrin_t{V, 'cmp',int}}, a, b}
def eq_mask{a:V, b:V if has512e{V}} = a5cmp{a, b, 'eq',  0}
def ne_mask{a:V, b:V if has512e{V}} = a5cmp{a, b, 'neq', 4}
def gt_mask{a:V, b:V if has512e{V}} = a5cmp{a, b, 'gt',  30}
def ge_mask{a:V, b:V if has512e{V}} = a5cmp{a, b, 'ge',  29}
def lt_mask{a:V, b:V if has512e{V}} = a5cmp{a, b, 'lt',  17}
def le_mask{a:V, b:V if has512e{V}} = a5cmp{a, b, 'le',  18}

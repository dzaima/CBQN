include './base'
include './cbqnDefs'
include './f64'
include './bitops'
include './mask'

def rootty{T if isprim{T}} = T
def rootty{[_]T} = T

def is_s{X} = issigned{rootty{X}}
def is_u{X} = isunsigned{rootty{X}}

def ty_sc{O, R} = R # keep floats as-is
def ty_sc{O, R if is_s{O} and is_u{R}} = ty_s{R}
def ty_sc{O, R if is_u{O} and is_s{R}} = ty_u{R}

def bqn_or{a, b} = (a+b)-(a*b)


# + & -
def arithChk1{(__add), M, w:T, x:T, r:T} = tup{'any_top', M{(w^r) & (x^r)}}
def arithChk1{(__sub), M, w:T, x:T, r:T} = tup{'any_top', M{(w^x) & (w^r)}}
def arithChk1{(__add), M, w:T=[_]E, x:T, r:T if not hasarch{'X86_64'} or width{E}<=16} = tup{'anyne', adds{w,x}, r}
def arithChk1{(__sub), M, w:T=[_]E, x:T, r:T if not hasarch{'X86_64'} or width{E}<=16} = tup{'anyne', subs{w,x}, r}



def arithChk2{F, M, w:T, x:T if is_s{T} and (same{F,__add} or same{F,__sub})} = {
  r:= F{w,x}
  tup{r, arithChk1{F, M, w, x, r}}
}

# ×
def arithChk2{F==__mul, M, w:T=[_](i8), x:T if hasarch{'X86_64'}} = {
  def wp = mzip128{w, T ~~ (T**0 > w)}
  def xp = mzip128{x, T ~~ (T**0 > x)}
  def rp = each{__mul, wp, xp}
  if (M{0}) { # masked check
    def bad = each{{v} => ty_s{(v<<8)>>8 != v}, rp}
    tup{packQ{rp}, tup{'any_hom', M{packQ{bad}}}}
  } else { # unmasked check; can do check in a simpler way
    def bad = each{{v} => ty_s{v ^ (v>>15)}, rp}
    def RU = re_el{u16,T}
    tup{packQ{rp}, tup{'and_some', RU~~tree_fold{|, bad}, RU**0xff80}}
  }
}
def arithChk2{F==__mul, M, w:T=[_](i16), x:T if hasarch{'X86_64'}} = {
  rl:= __mul{w,x}
  rh:=  mulh{w,x}
  tup{rl, tup{'anyne', rh, rl>>15}}
}
def arithChk2{F==__mul, M, w:T=[_](i32), x:T if hasarch{'X86_64'}} = {
  max:= re_el{f32, (ty_u{T})**0x4efffffe}
  def cf32{x:X} = emit{re_el{f32,X}, tern{T==[8]i32, '_mm256_cvtepi32_ps', '_mm_cvtepi32_ps'}, x}
  f32mul:= cf32{w} * cf32{x}
  tup{w*x, tup{'any_hom', M{abs{f32mul} >= max}}}
  # TODO fallback to the below if the above fails
  # TODO don't do this, but instead shuffle one half, do math, unshuffle that half
  # def wp = mzip128{w, T**0}
  # def xp = mzip128{x, T**0}
  # def rp = each{mul32, wp, xp}
  # def T2 = re_el{i64, T}
  # def bad = each{{v} => {
  #   ((T2~~v + T2**0x80000000) ^ T2**(cast{i64,1}<<63)) > T2**cast_i{i64, (cast{u64,1}<<63) | 0xFFFFFFFF}
  # }, rp}
  # tup{packQQ{each{{v} => v & T2**0xFFFFFFFF, rp}}, tup{'any_hom', tree_fold{|,bad}}} this doesn't use M
}

def arithChk2{F==__mul, M, w:T=[_]E, x:T if hasarch{'AARCH64'}} = {
  def {rl, rh} = pack{...mulw_split{w, x}}
  tup{rl, tup{'any_hom', M{rh != (rl >> (width{E}-1))}}}
}



def runner{u, R, F} = {
  def c = ~u
  
  def run{F, M, w, x} = { show{'todo', c, R, F, w, x}; emit{void,'__builtin_abort'}; w }
  
  def run{F, M, w:T, x:T if c and R!=u32} = {
    arithChk2{F, M, w, x}
  }
  
  def run{F, M, w, x if u} = tup{F{w, x}, tup{'none'}} # trivial base implementation
  
  def toggleTop{x:X=[_]E} = x ^ X**(1<<(width{E}-1))
  def run{F==__sub, M, w:VU, x:VU if c and is_u{VU}} = { # 'b'-'a'
    def VS = ty_s{VU}
    run{F, M, VS~~toggleTop{w}, VS~~toggleTop{x}}
  }
  def run{F, M, w:VU, x:VS if c and is_u{VU} and is_s{VS}} = { # 'a'+3, 'a'-3
    def {res, ok} = run{F, M, VS~~toggleTop{w}, x}
    tup{toggleTop{VU~~res}, ok}
  }
  def run{F==__add, M, w:VS, x:VU if c and is_s{VS} and is_u{VU}} = run{F, M, x, w} # 3+'a' → 'a'+3
  
  def run{F, M, w:VW, x:VX if c and R==u32 and (same{F,__add} or same{F,__sub})} = { # 'a'+1, 'a'-1
    r:= F{ty_u{w}, ty_u{x}}
    tup{re_el{R, VW}~~r, tup{'any_hom', M{r > type{r}**1114111}}}
  }
  run
}

# any_hom, any_top already give masked vals; anyne doesn't, and and_some assumes no masking
def runChecks_any{F, vals} = { F{...each{select{.,1}, vals}} }
def runChecks{'any_hom',  vals, M} = runChecks_any{any_hom, vals}
def runChecks{'any_top',  vals, M} = runChecks_any{any_top, vals}
def runChecks{'none',     vals, M} = 0
def runChecks{'and_some', vals, M if ~M{0}} = ~tree_fold{&, each{and_bit_none, ...slice{flip{vals}, 1}}}
def runChecks{'anyne',    vals, M} = {
  def i{vals} = {
    def {_,xs,ys} = flip{vals}
    assert{M{0} == 0}
    ~all_hom{M, ...each{==, xs, ys}}
  }
  def i{{{_,x,y}}} = anyne{x, y, M}
  i{vals}
}

def arithProcess{F, run, overflow, M, is, cw, cx, TY} = {
  def {values, checks} = flip{each{{w1, x1} => run{F, M, w1, x1}, cw, cx}}
  def ctype = one_val{each{select{.,0}, checks}}
  if (rare{runChecks{ctype, checks, M}}) overflow{select{is,0}*vcount{TY}}
  each{{c} => TY~~c, values}
}

def arithAAimpl{vw, mode, F, W, X, R, w, x, r, len} = {
  # show{F, mode, W, X, R}
  if (R==u1) {
    def bulk = vw/64
    def VT = [bulk]u64
    @for_masked{bulk}(r in tup{'g',*u64~~r}, cw in tup{VT,*u64~~w}, cx in tup{VT,*u64~~x} over cdiv{len, 64}) r{F{cw,cx}}
  } else if (same{F,__mul} and W!=u1 and X==u1 and W==R) { # 0‿1‿1‿1‿1‿0‿1‿1×3‿1‿4‿1‿5‿9‿2‿6
    def bulk = vw / width{W}
    def TU = ty_u{R}
    def TV = [bulk]TU
    
    @for_mu{bulk, 2}(sr in tup{'g',*TU~~r}, cw in tup{TV,*TU~~w}, cx in tup{'b',TV,x} over len) {
      sr{each{&, cw, cx}}
    }
  } else {
    def bulk = vw / max{max{width{W}, width{X}}, width{R}}
    def overflow = tern{mode==1, {i}=>return{i}, tern{mode==2, {i}=>return{1}, 0}}
    def TY = [bulk]R
    
    def run = runner{same{overflow, 0}, R, F}
    
    def unr = tern{mode==0, 2, 1} # 2x unroll non-overflowing cases; suppresses clang's default unrolling, which unrolls a lot more; 2x appears to be plenty
    @for_mu{bulk, unr}(sr in tup{'g',*R~~r}, cw in tup{ty_sc{W,TY},*W~~w}, cx in tup{ty_sc{X,TY},*X~~x}, M in 'm' over is to len) {
      sr{arithProcess{F, run, overflow, M, is, cw, cx, TY}}
    }
  }
}

fn arithAAc{vw, mode, F, W, X, R}(r:*void, w:*void, x:*void, len:u64) : u64 = {
  arithAAimpl{vw, mode, F, W, X, R, w, x, r, len}
  if (mode==1) len
  else 0
}
fn arithAAu{vw, mode, F, W, X, R}(r:*void, w:*void, x:*void, len:u64) : void = {
  arithAAimpl{vw, mode, F, W, X, R, w, x, r, len}
}

def arithAA{mode, F, W, X, R} = {
  def vw = arch_defvw
  if (mode==1 or mode==2) arithAAc{vw, mode, F, W, X, R}
  else arithAAu{vw, mode, F, W, X, R}
}

# mode: 0:overflow-checked, needed; 1:overflow-erroring; 2: overflow-checked, not needed; 3: overflow-erroring, not needed
fn arithSAf{vw, mode, F, swap, W, X, R}(r:*void, w:u64, x:*void, len:u64) : u64 = {
  # show{F, swap, mode, W, X, R}
  assert{len>0}
  def bulk = vw / max{width{W}, width{R}}
  def TY = [bulk]R
  def overflow = tern{mode==1, {i}=>return{1}, {i}=>return{i}}
  
  def run = runner{(R==f64) | (mode>=2), R, F}
  def getW{v} = trunc{W, v}
  def getW{v if W==f64} = interp_f64{v}
  cw:= ty_sc{W, TY}**getW{w}
  
  def unr = tern{mode>=2, 2, 1} # same as in arithAAimpl
  @for_mu{bulk, unr}(sr in tup{'g',*R~~r}, cx in tup{ty_sc{X,TY},*X~~x}, M in 'm' over is to len) {
    def cws = length{is}**cw
    sr{arithProcess{F, run, overflow, M, is, tern{swap,cx,cws}, tern{swap,cws,cx}, TY}}
  }
  
  if (mode==1 or mode==3) 0
  else len
}

def arithSA{mode, F, swap, W, X, R} = arithSAf{arch_defvw, mode, F, swap, W, X, R}

fn andBytes{vw}(r: *u8, x: *u8, maskU64:u64, len:u64) : void = {
  assert{vw>=64}
  def bulk = vw / width{u8}
  def T8 = [bulk]u8
  def T64 = [bulk/8]u64
  maskFull:= T8~~T64**maskU64
  @for_masked{bulk}(sr in tup{'g',r}, cx in tup{T8,x} over len) sr{cx & maskFull}
}

export{'simd_andBytes', andBytes{arch_defvw}}
export{'orSAc_f64_f64_f64', arithSA{2,bqn_or,0,f64,f64,f64}}
include 'gen/arDefs'

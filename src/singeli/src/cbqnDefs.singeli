def bcall{T, f, x} = emit{T, 'BCALL', f, x}
def from_B{T, x if T==f64} = bcall{T, 'o2fG', x}
def from_B{T, x if T<=i32 and   issigned{T}} = bcall{T, 'o2iG', x}
def from_B{T, x if T<=u32 and isunsigned{T}} = bcall{T, 'o2cG', x}
def fatal{msg} = emit{void, 'fatal', merge{'"', msg, '"'}}

def q_f64{x} = bcall{u1, 'q_f64', x}
def q_chr{x} = bcall{u1, 'q_c32', x}
def q_chr{(u8 ),x} = bcall{u1, 'q_c8',  x}
def q_chr{(u16),x} = bcall{u1, 'q_c16', x}
def q_chr{(u32),x} = bcall{u1, 'q_c32', x}

def cbqn_c32Tag{} = emit{u64, '', 'C32_TAG'}
def cbqn_tagTag{} = emit{u64, '', 'TAG_TAG'}
def cbqn_varTag{} = emit{u64, '', 'VAR_TAG'}
def cbqn_extTag{} = emit{u64, '', 'EXT_TAG'}
def cbqn_rawTag{} = emit{u64, '', 'RAW_TAG'}
def cbqn_md1Tag{} = emit{u64, '', 'MD1_TAG'}
def cbqn_md2Tag{} = emit{u64, '', 'MD2_TAG'}
def cbqn_funTag{} = emit{u64, '', 'FUN_TAG'}
def cbqn_nspTag{} = emit{u64, '', 'NSP_TAG'}
def cbqn_objTag{} = emit{u64, '', 'OBJ_TAG'}
def cbqn_arrTag{} = emit{u64, '', 'ARR_TAG'}

def cbqn_elType = match {
  {(u1)} => 0; {(i8)} => 1; {(i16)} => 2; {(i32)} => 3; {(f64)} => 4
               {(u8)} => 5; {(u16)} => 6; {(u32)} => 7
}

def cbqn_tyArrOffset{} = emit{u64, 'offsetof', 'TyArr', 'a'}

def talloc{T, len} = emit{*T, 'TALLOCP', fmt_type{T}, len}
def tfree{ptr} = emit{void, 'TFREE', ptr}
def fmt_type{T} = merge{quality{T}, fmtnat{width{T}}}
def fmt_type{*T} = merge{'*',fmt_type{T}}

def el_bit = 0
def el_i8  = 1
def el_i16 = 2
def el_i32 = 3
def el_f64 = 4
def el_c8  = 5
def el_c16 = 6
def el_c32 = 7
def el_B   = 8

def get_range{elt, data:*_, len:ux if any_int{elt} and (not knum{elt} or (elt>=el_bit and elt<=el_f64))} = {
  def fns = emit{*fntype{*void, *i64, u64, u1}, '', 'getRange_fns'}
  buf:*i64 = undefined{i64, 2}
  def ok = load{fns, elt}(*void~~data, buf, len)
  tup{ok, load{buf,0}, load{buf,1}}
}

def get_range{data:*E, len} = get_range{match(E) {
  {(u1)} => el_bit
  {(i8)} => el_i8
  {(i16)} => el_i16
  {(i32)} => el_i32
  {(f64)} => el_f64
}, data, len}
def get_range{data:*E, s, e} = get_range{data+s, e-s}
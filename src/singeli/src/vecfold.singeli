# Fold associative/commutative operation across a register

def vfold{F, x:V=[_]T if w128{V} and hasarch{'X86_64'}} = {
  c:= x
  def EW = width{T}
  if (EW<=64) c = F{c, shuf{u64, c, 1,0}}
  if (EW<=32) c = F{c, shuf{u32, c, 1,0}}
  if (EW<=16) c = F{c, vec_shuffle16_lo{c, tup{1,0,3,2}}}
  if (EW==8) { v:=extract{[8]i16~~c, 0}; F{cast_i{T, v}, cast_i{T, v>>8}} }
  else extract{c, 0}
}
def vfold{(__add), x:V=[16]E if hasarch{'X86_64'} and width{E}==8} = {
  c:= x + shuf{u64, x, 1,0}
  cast_i{E, extract{absdiff_sum{8, ty_u{c}, [16]u8**0}, 0}}
}


def vfold{F, x:T if w256{T} and hasarch{'X86_64'}} = vfold{F, F{half{x, 0}, half{x, 1}}}

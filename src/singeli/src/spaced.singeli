def spaced_mask_of{l} = emit{u64, 'get_spaced_mask', l} # see slash.singeli

def aligned_spaced_mask{l} = {
  assert{l <= 64}
  assert{is_pow2{l}}
  spaced_mask_of{l}
}

def unaligned_spaced_mask_mod{l:T} = {
  assert{l < 64}
  def m = spaced_mask_of{l}
  def d = cast_i{T, ctz{m}} # = 64%l
  tup{m>>d | m<<(l-d), d}
}

def advance_spaced_mask{k, m, sh} = m<<(k-sh) | m>>sh

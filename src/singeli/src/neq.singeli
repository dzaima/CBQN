include './base'
include './sse3'

def clmul{a:T, b:T, imm & w128i{T}} = emit{T, '_mm_clmulepi64_si128', a, b, imm}
def unpacklo{a:T,b:T & T==[2]u64} = emit{T, '_mm_unpacklo_epi64', a, b}

def loadl{a:T, n & w128i{eltype{T}   }} = emit{eltype{T}, '_mm_loadu_si64',       a+n}
def storel{a:T, n, v & w128i{eltype{T}   }} = emit{void, '_mm_storeu_si64',       a+n,  v}

clmul_scan_ne_any(x:*void, r:*void, init:u64, words:u64, mark:u64) : void = {
  def V = [2]u64
  m := V**mark
  def xor64{a, i, carry} = { # carry is 64-bit broadcasted current total
    p := clmul{a, m, i}
    t := shr{[16]u8, p, 8}
    s := p ^ carry
    carry = s ^ t
    s
  }
  xv := *V ~~ x
  rv := *V ~~ r
  e := words/2
  c := V**init
  @for (rv, xv over e) {
    rv = apply{unpacklo, (@collect (j to 2) xor64{xv, j, c})}
  }
  if (words & 1) {
    storel{rv,e, clmul{loadl{xv,e}, m, 0} ^ c}
  }
}
clmul_scan_ne_bit(init:u64, x:*u64, r:*u64, ia:u64) : void = {
  clmul_scan_ne_any(*void~~x, *void~~r, init, ia, -(u64~~1))
}
'clmul_scan_ne' = clmul_scan_ne_bit
